name: Path Protection - Developer Test
on:
  pull_request:
    branches: [main]

jobs:
  path-protection:
    runs-on: ubuntu-latest
    steps:
    
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch main branch
        run: |
          git fetch origin main

      - name: Get changed files
        id: changed-files
        run: |
          echo "Getting files changed in this PR..."
          CHANGED_FILES=$(git diff --name-only origin/main..HEAD)
          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "Files changed in this PR:"
          echo "$CHANGED_FILES"

      - name: Check user team membership
        id: check-permissions
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          USER="${{ github.actor }}"
          ORG="${{ github.repository_owner }}"
          echo "Checking team membership for user: $USER in org: $ORG"
          
          # Check if user is in admin team
          ADMIN_CHECK=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/orgs/$ORG/teams/admins/members/$USER" \
            -w "%{http_code}")
          
          # GitHub API returns 204 if user is in team, 404 if not
          if [[ "$ADMIN_CHECK" == *"204"* ]]; then
            echo "is_admin=true" >> $GITHUB_OUTPUT
            echo "$USER is in the 'admins' team - full access granted"
          else
            echo "is_admin=false" >> $GITHUB_OUTPUT
            echo "$USER is not in 'admins' team - checking developer permissions"
            
            # Check if user is in developers team
            DEV_CHECK=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/orgs/$ORG/teams/developers/members/$USER" \
              -w "%{http_code}")
            
            if [[ "$DEV_CHECK" == *"204"* ]]; then
              echo "is_developer=true" >> $GITHUB_OUTPUT
              echo "$USER is in 'developers' team - restricted access"
            else
              echo "is_developer=false" >> $GITHUB_OUTPUT
              echo "WARNING: $USER is not in any recognized team"
            fi
          fi

      - name: Validate team membership
        run: |
          if [[ "${{ steps.check-permissions.outputs.is_admin }}" != "true" ]] && \
             [[ "${{ steps.check-permissions.outputs.is_developer }}" != "true" ]]; then
            echo "‚ùå ERROR: User ${{ github.actor }} is not in any authorized team"
            echo "Please ensure you are added to either:"
            echo "  - 'admins' team (full access)"
            echo "  - 'developers' team (restricted access)"
            echo ""
            echo "Contact your organization admin to add you to appropriate teams."
            exit 1
          fi

      - name: Validate developer access restrictions
        if: steps.check-permissions.outputs.is_admin == 'false' && steps.check-permissions.outputs.is_developer == 'true'
        run: |
          echo "Applying developer access restrictions..."
          
          # Define protected paths that developers cannot modify
          PROTECTED_PATHS=(
            "protected-configs/"
            "scripts/deployment/"
            "secrets/"
            ".github/workflows/"
          )
          
          VIOLATIONS=""
          
          # Check each changed file against protected paths
          while IFS= read -r file; do
            if [[ -n "$file" ]]; then
              echo "Checking file: $file"
              for pattern in "${PROTECTED_PATHS[@]}"; do
                if [[ "$file" == $pattern* ]] || [[ "$file" == *"$pattern"* ]]; then
                  echo "‚ö†Ô∏è  VIOLATION: $file matches restricted pattern: $pattern"
                  VIOLATIONS="$VIOLATIONS\n- $file (matches pattern: $pattern)"
                fi
              done
            fi
          done <<< "${{ steps.changed-files.outputs.changed_files }}"
          
          # If violations found, block the PR
          if [[ -n "$VIOLATIONS" ]]; then
            echo ""
            echo "üö´ ACCESS DENIED: Developers cannot modify PROTECTED paths"
            echo "=============================================="
            echo -e "Restricted files in this PR:$VIOLATIONS"
            echo ""
            echo "üìã To resolve this issue:"
            echo "   1. Remove changes to PROTECTED files from your PR, OR"
            echo "   2. Ask an admin team member to create this PR instead, OR"
            echo "   3. Move changes to protected folders into a separate admin-only PR"
            echo ""
            echo "‚úÖ You CAN modify files in:"
            echo "   - public-configs/"
            echo "   - scripts/dev-tools/"
            echo "   - src/, docs/, README.md and documentation"
            echo "   - Most application code outside protected areas"
            echo "=============================================="
            exit 1
          fi
          
          echo "‚úÖ All changed files are accessible to developers"
          echo "üìù PR approved for developer access level"

      - name: Admin access confirmation
        if: steps.check-permissions.outputs.is_admin == 'true'
        run: |
          echo "üîê Admin team member detected - no path restrictions apply"
          echo ""
          echo "‚úÖ Admin can modify any files including:"
          echo "   - protected-configs/"
          echo "   - scripts/deployment/"
          echo "   - secrets/"
          echo "   - .github/workflows/"
          echo "   - All other folders"
          echo ""
          echo "üìÅ Files that will be modified in this PR:"
          while IFS= read -r file; do
            if [[ -n "$file" ]]; then
              echo "   - $file"
            fi
          done <<< "${{ steps.changed-files.outputs.changed_files }}"