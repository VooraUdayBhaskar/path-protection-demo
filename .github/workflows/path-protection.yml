name: Path Protection - Developer Test
on:
  pull_request:
    branches: [main]

jobs:
  path-protection:
    runs-on: ubuntu-latest
    steps:
    
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch main branch
        run: |
          git fetch origin main

      - name: Get changed files
        id: changed-files
        run: |
          echo "Getting files changed in this PR..."
          CHANGED_FILES=$(git diff --name-only origin/main..HEAD)
          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "Files changed in this PR:"
          echo "$CHANGED_FILES"

      - name: Check if user is admin
        id: check-admin
        run: |
          USER="${{ github.actor }}"
          echo "Checking access level for user: $USER"
          
          #Admin list 
          ADMIN_USERS=("admin1" "admin2")
          
          if [[ " ${ADMIN_USERS[@]} " =~ " ${USER} " ]]; then
            echo "is_admin=true" >> $GITHUB_OUTPUT
            echo "$USER is an admin - can access all folders"
          else
            echo "is_admin=false" >> $GITHUB_OUTPUT  
            echo " $USER is a developer - restricted access to protective folders"
          fi

      - name: Validate developer access restrictions
        if: steps.check-admin.outputs.is_admin == 'false'
        run: |
          echo "Applying developer access restrictions..."
          
          # Define protective paths that developers cannot modify
          PROTECTED_PATHS=(
            "protective-configs/"
            "scripts/deployment/"
            "production.yml"
            "secrets/"
          )
          
          VIOLATIONS=""
          
          # Check each changed file against PROTECTED paths
          while IFS= read -r file; do
            if [[ -n "$file" ]]; then
              echo "Checking file: $file"
              for pattern in "${PROTECTED_PATHS[@]}"; do
                if [[ "$file" == $pattern* ]] || [[ "$file" == *"$pattern"* ]]; then
                  echo " VIOLATION: $file matches restricted pattern: $pattern"
                  VIOLATIONS="$VIOLATIONS\n- $file (matches pattern: $pattern)"
                fi
              done
            fi
          done <<< "${{ steps.changed-files.outputs.changed_files }}"
          
          # If violations found, block the PR
          if [[ -n "$VIOLATIONS" ]]; then
            echo ""
            echo " ACCESS DENIED: Developers cannot modify PROTECTED paths content"
            echo "=============================================="
            echo -e "Restricted files in this PR:$VIOLATIONS"
            echo ""
            echo " To resolve this issue:"
            echo "   1. Remove changes to PROTECTED files from your PR, OR"
            echo "   2. Ask an admin to create this PR instead, OR"
            echo "   3. Move changes IN PROTECTED FOLDER to a separate admin-only PR"
            echo ""
            echo " You CAN modify files in:"
            echo "   - public-configs/"
            echo "   - scripts/dev-tools/"
            echo "   - README.md and documentation"
            echo "=============================================="
            exit 1
          fi
          
          echo " All changed files are accessible to developers"
          echo " PR approved for developer access level"

      - name: Admin access confirmation
        if: steps.check-admin.outputs.is_admin == 'true'
        run: |
          echo "Admin user detected - no path restrictions apply"
          echo "Admin can modify any files including:"
          echo "- protective-configs/"
          echo "- scripts/deployment/"
          echo "- All other folders"
          echo ""
          echo "Files that will be modified in this PR:"
          echo "${{ steps.changed-files.outputs.changed_files }}"