name: Path Protection - Developer Test

on:
  pull_request:
    branches: [main]

permissions:
  contents: read
  pull-requests: read

jobs:
  path-protection:
    runs-on: ubuntu-latest

    # <-- make ORG_TOKEN available to steps (Org secret you created)
    env:
      ORG_TOKEN: ${{ secrets.ORG_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch main branch
        run: git fetch origin main

      - name: Get changed files
        id: changed-files
        run: |
          set -euo pipefail
          echo "Getting files changed in this PR..."
          CHANGED_FILES=$(git diff --name-only origin/main..HEAD)
          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "Files changed in this PR:"
          echo "$CHANGED_FILES"

      - name: Check user team membership (org + teams)
        id: check-permissions
        run: |
          set -euo pipefail

          if [[ -z "${ORG_TOKEN:-}" ]]; then
            echo "‚ùå ORG_TOKEN is not available to this repo. Add an Org secret named ORG_TOKEN."
            exit 1
          fi

          API="https://api.github.com"
          ORG="${{ github.repository_owner }}"
          USER="${{ github.actor }}"
          REPO="${{ github.repository }}"
          PRNUM="${{ github.event.pull_request.number }}"
          HDR="Authorization: Bearer $ORG_TOKEN"
          ACC="Accept: application/vnd.github+json"

          echo "üîé Checking permissions for $USER in org $ORG"

          # ---- Optional test hook: simulate developer via PR label ----
          labels=$(curl -sS -H "$HDR" -H "$ACC" "$API/repos/$REPO/issues/$PRNUM/labels" | jq -r '.[].name')
          if grep -qi '^simulate-developer$' <<<"$labels"; then
            echo "üß™ Simulating developer role via label"
            {
              echo "is_admin=false"
              echo "is_developer=true"
            } >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # ---- ORG ROLE (returns state + role) ----
          org_status=$(curl -sS -o /tmp/org.json -w "%{http_code}" -H "$HDR" -H "$ACC" \
            "$API/orgs/$ORG/memberships/$USER")
          role=$(jq -r '.role  // empty' /tmp/org.json || true)
          state=$(jq -r '.state // empty' /tmp/org.json || true)
          echo "‚ÑπÔ∏è  /memberships status: $org_status; role=$role state=$state"

          is_admin=false
          is_developer=false
          is_owner=false

          if [[ "$org_status" == "200" && "$state" == "active" && "$role" == "admin" ]]; then
            is_admin=true
            is_owner=true  # owners are reported with role=admin at org level
            echo "üëë $USER is org admin/owner"
          fi

          # ---- TEAM MEMBERSHIPS (only check if not already admin) ----
          if [[ "$is_admin" == "false" ]]; then
            for team in admins developers; do
              team_status=$(curl -sS -o /tmp/$team.json -w "%{http_code}" -H "$HDR" -H "$ACC" \
                "$API/orgs/$ORG/teams/$team/memberships/$USER")
              tstate=$(jq -r '.state // empty' /tmp/$team.json || true)
              echo "‚ÑπÔ∏è  /teams/$team/memberships status: $team_status; state=$tstate"

              if [[ "$team_status" == "200" && "$tstate" == "active" ]]; then
                echo "‚úÖ $USER is ACTIVE in team: $team"
                [[ "$team" == "admins" ]] && is_admin=true
                [[ "$team" == "developers" ]] && is_developer=true
              else
                echo "‚ö™ $USER is NOT active in team: $team"
              fi
            done
          fi

          {
            echo "is_admin=$is_admin"
            echo "is_developer=$is_developer"
            echo "is_owner=$is_owner"
          } >> "$GITHUB_OUTPUT"

      - name: Debug membership flags
        run: |
          echo "is_admin=${{ steps.check-permissions.outputs.is_admin }}"
          echo "is_developer=${{ steps.check-permissions.outputs.is_developer }}"
          echo "is_owner=${{ steps.check-permissions.outputs.is_owner }}"

      - name: Validate team membership
        run: |
          if [[ "${{ steps.check-permissions.outputs.is_admin }}" == "true" ]]; then
            echo "‚úÖ User ${{ github.actor }} has admin access"
          elif [[ "${{ steps.check-permissions.outputs.is_developer }}" == "true" ]]; then
            echo "‚úÖ User ${{ github.actor }} has developer access"
          else
            echo "‚ùå ERROR: User ${{ github.actor }} is not in any authorized team"
            echo "Please ensure you are added to either:"
            echo "  - 'admins' team (full access)"
            echo "  - 'developers' team (restricted access)"
            exit 1
          fi

      - name: Enforce developer path restrictions
        if: steps.check-permissions.outputs.is_admin == 'false' && steps.check-permissions.outputs.is_developer == 'true'
        run: |
          set -euo pipefail
          echo "Applying developer access restrictions..."

          PROTECTED_PATHS=(
            "protected-configs/"
            "scripts/deployment/"
            "secrets/"
            ".github/workflows/"
          )

          VIOLATIONS=""
          while IFS= read -r file; do
            [[ -z "$file" ]] && continue
            echo "Checking file: $file"
            for pattern in "${PROTECTED_PATHS[@]}"; do
              if [[ "$file" == "$pattern"* ]]; then
                echo "‚ö†Ô∏è  VIOLATION: $file matches restricted pattern: $pattern"
                VIOLATIONS="${VIOLATIONS}\n- $file (matches pattern: $pattern)"
              fi
            done
          done <<< "${{ steps.changed-files.outputs.changed_files }}"

          if [[ -n "$VIOLATIONS" ]]; then
            echo ""
            echo "üö´ ACCESS DENIED: Developers cannot modify PROTECTED paths"
            echo "=============================================="
            echo -e "Restricted files in this PR:$VIOLATIONS"
            echo "=============================================="
            exit 1
          fi

          echo "‚úÖ No protected paths touched. OK for developers."

      - name: Admin access confirmation
        if: steps.check-permissions.outputs.is_admin == 'true'
        run: |
          if [[ "${{ steps.check-permissions.outputs.is_owner }}" == "true" ]]; then
            echo "üëë Organization owner detected - inherent admin access"
          else
            echo "üîê Admin team member detected - no path restrictions apply"
          fi

          echo "üìÅ Files in this PR:"
          while IFS= read -r file; do
            [[ -n "$file" ]] && echo "   - $file"
          done <<< "${{ steps.changed-files.outputs.changed_files }}"
